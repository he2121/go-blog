// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./userservice_mock.go -package userservice -source $GOFILE

package userservice

import (
	"context"

	"github.com/he2121/go-blog/user/rpc/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AuthByEmailCodeReq   = user.AuthByEmailCodeReq
	AuthByEmailCodeResp  = user.AuthByEmailCodeResp
	AuthByIDPasswordResp = user.AuthByIDPasswordResp
	UserExtra            = user.UserExtra
	MGetUserInfoReq      = user.MGetUserInfoReq
	MGetUserInfoResp     = user.MGetUserInfoResp
	SendEmailCodeReq     = user.SendEmailCodeReq
	SendEmailCodeResp    = user.SendEmailCodeResp
	AuthByIDPasswordReq  = user.AuthByIDPasswordReq
	User                 = user.User
	UpdateUserInfoReq    = user.UpdateUserInfoReq
	UpdateUserInfoResp   = user.UpdateUserInfoResp

	UserService interface {
		//  邮箱登陆认证发送验证吗
		SendEmailCode(ctx context.Context, in *SendEmailCodeReq) (*SendEmailCodeResp, error)
		//  邮箱登陆认证 (没有注册过默认会注册一个账号)
		AuthByEmailCode(ctx context.Context, in *AuthByEmailCodeReq) (*AuthByEmailCodeResp, error)
		//  ID + 密码认证
		AuthByIDPassword(ctx context.Context, in *AuthByIDPasswordReq) (*AuthByIDPasswordResp, error)
		//  批量获取指定用户ID 的基本信息
		MGetUserInfo(ctx context.Context, in *MGetUserInfoReq) (*MGetUserInfoResp, error)
		//  修改指定用户ID 的基本信息
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

//  邮箱登陆认证发送验证吗
func (m *defaultUserService) SendEmailCode(ctx context.Context, in *SendEmailCodeReq) (*SendEmailCodeResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.SendEmailCode(ctx, in)
}

//  邮箱登陆认证 (没有注册过默认会注册一个账号)
func (m *defaultUserService) AuthByEmailCode(ctx context.Context, in *AuthByEmailCodeReq) (*AuthByEmailCodeResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.AuthByEmailCode(ctx, in)
}

//  ID + 密码认证
func (m *defaultUserService) AuthByIDPassword(ctx context.Context, in *AuthByIDPasswordReq) (*AuthByIDPasswordResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.AuthByIDPassword(ctx, in)
}

//  批量获取指定用户ID 的基本信息
func (m *defaultUserService) MGetUserInfo(ctx context.Context, in *MGetUserInfoReq) (*MGetUserInfoResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.MGetUserInfo(ctx, in)
}

//  修改指定用户ID 的基本信息
func (m *defaultUserService) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in)
}
