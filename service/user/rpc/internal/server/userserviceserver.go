// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"github.com/he2121/go-blog/service/user/rpc/internal/logic"
	"github.com/he2121/go-blog/service/user/rpc/internal/svc"
	"github.com/he2121/go-blog/service/user/rpc/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

//  邮箱登陆认证发送验证吗
func (s *UserServiceServer) SendEmailCode(ctx context.Context, in *user.SendEmailCodeReq) (*user.SendEmailCodeResp, error) {
	l := logic.NewSendEmailCodeLogic(ctx, s.svcCtx)
	return l.SendEmailCode(in)
}

//  邮箱登陆认证 (没有注册过默认会注册一个账号)
func (s *UserServiceServer) AuthByEmailCode(ctx context.Context, in *user.AuthByEmailCodeReq) (*user.AuthByEmailCodeResp, error) {
	l := logic.NewAuthByEmailCodeLogic(ctx, s.svcCtx)
	return l.AuthByEmailCode(in)
}

//  ID + 密码认证
func (s *UserServiceServer) AuthByIDPassword(ctx context.Context, in *user.AuthByIDPasswordReq) (*user.AuthByIDPasswordResp, error) {
	l := logic.NewAuthByIDPasswordLogic(ctx, s.svcCtx)
	return l.AuthByIDPassword(in)
}

//  批量获取指定用户ID 的基本信息
func (s *UserServiceServer) MGetUserInfo(ctx context.Context, in *user.MGetUserInfoReq) (*user.MGetUserInfoResp, error) {
	l := logic.NewMGetUserInfoLogic(ctx, s.svcCtx)
	return l.MGetUserInfo(in)
}

//  修改指定用户ID 的基本信息
func (s *UserServiceServer) UpdateUserInfo(ctx context.Context, in *user.UpdateUserInfoReq) (*user.UpdateUserInfoResp, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}
