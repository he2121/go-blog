syntax = "proto3";

package message;
option go_package = "./message";

message Notification {
  int64 ID = 1;
  int64 UserID = 2;       // 通知的用户 ID
  EventType EventType = 3;    // 触发该通知的事件类型 1：点赞 2: 评论 3: 发帖 4：关注
  int32 EntityType = 4;   // 试题类型 1: BLOG 2: COMMENT 3: USER
  int64 EntityID = 5;     // 触发事件的实体 ID
  int64 TriggerID = 6;    // 触发事件的用户 ID
  int32 Status = 7;       // 状态 1：未读 2：已读
  int64 CreatedAt = 8; // 创建时间
  int64 UpdatedAt = 9; // 更新时间
}

enum EventType {
  UnKnow = 0;
  Like = 1;     // 点赞
  Comment = 2;  // 评论
  Post = 3;     // 发帖
  Follow = 4;   // 关注
}

message CreateNotificationReq {
  int64 UserID = 1;           // 通知的用户 ID
  EventType EventType = 2;    // 触发该通知的事件类型 1：点赞 2: 评论 3: 发帖 4：关注
  int32 EntityType = 3;       // 实体类型 1: BLOG 2: COMMENT 3: USER
  int64 EntityID = 4;         // 触发事件的实体 ID
  int64 TriggerID = 5;        // 触发事件的用户 ID
}
message CreateNotificationResp {
}

message GetNotificationListReq {
  repeated int64 UserIDs = 1;   //
  optional EventType EventType = 2; // 事件类型

  int32 Offset = 98;
  int32 Limit = 99;
  optional bool NeedCount = 100;
}
message GetNotificationListResp {
  repeated int64 IDs = 1;
  map<int64, Notification> Notifications = 2;

  bool HasMore = 98;
  int32 TotalCount = 99;
}

message UpdateNotificationReq {
  int64 ID = 1;

  optional int32 Status = 3;  // 更改系统通知的已读状态
}
message UpdateNotificationResp {
}

message Message {
  int64 ID = 1;
  int64 FromID = 2;       // 发送者 ID
  int64 ToID = 3;         // 接受者 ID
  string SessionID = 4;   // 会话 ID， 由发送者接受者ID组合，小 ID：大 ID
  string Content = 5;     // 消息内容
  int32 Status = 6;       // 1：未读 2：已读 3：撤回
  int64 CreatedAt = 8; // 创建时间
  int64 UpdatedAt = 9; // 更新时间

}

message CreateMessageReq {
  int64 FromID = 1;       // 发送者 ID
  int64 ToID = 2;         // 接受者 ID
  string Content = 3;     // 消息内容
}
message CreateMessageResp {
}

message GetMessageListReq {
  optional string SessionID = 1;
  optional int64 ToID = 2;
  optional int32 Status = 3;
  optional int64 FromID = 4;

  int32 Offset = 98;
  int32 Limit = 99;
  optional bool NeedCount = 100;
}
message GetMessageListResp {
  repeated int64 IDs = 1;
  map<int64, Message> Messages = 2;

  bool HasMore = 98;
  int32 TotalCount = 99;
}

message UpdateMessageReq {
  int64 ID = 1;
  optional string Content = 2;
  optional int32 Status = 3;
}
message UpdateMessageResp {
}


service MessageService {
  // 系统通知的增删改查
  rpc CreateNotification(CreateNotificationReq) returns (CreateNotificationResp);
  rpc GetNotificationList(GetNotificationListReq) returns (GetNotificationListResp);
  rpc UpdateNotification(UpdateNotificationReq) returns (UpdateNotificationResp);
  // 消息的增删改查
  rpc CreateMessage(CreateMessageReq) returns (CreateMessageResp);
  rpc GetMessageList(GetMessageListReq) returns (GetMessageListResp);
  rpc UpdateMessage(UpdateMessageReq) returns (UpdateMessageResp);
}